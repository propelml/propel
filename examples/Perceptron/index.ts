/*!
   Copyright 2018 Propel http://propel.site/.  All rights reserved.
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */
// A very simple perceptron to start learning Propel
// based on: https://blog.dbrgn.ch/2013/3/26/perceptrons-in-python

import { imshow, Params, T } from "propel";

// This is the OR function
const trainingData = [
  // [[x, y, bias], desired]
  [T([0, 0, 1]), 0],
  [T([0, 1, 1]), 1],
  [T([1, 0, 1]), 1],
  [T([1, 1, 1]), 1]
];

// create unitStep function
const unitStep = x => x < 0 ? 0 : 1;
// Generate and Initialize weight vector
let w = (new Params()).randn("W", [3]);
// The errors list is only used to store the error values so that
// they can be plotted later on.
const errors = [];
// The eta variable controls the learning rate
const eta = 0.2;
// n specifies the number of learning iterations.
const n = 100;

for (let i = 0; i < n; i++) {
  // select one row from learning data
  const d = trainingData[i % trainingData.length];
  // The input we want to pass to network
  const input = d[0];
  // The value we expect network to generate
  const expected = d[1];
  // This is the actual value generated by network
  const result = w.dot(input);
  // Calculate network's error
  const error = expected - unitStep(result);
  // Push that to errors so we can use it to plot a simple graph
  errors.push([i, error]);
  // Delta = (eta * error) * I
  // W = W + Delta
  w = w.add(input.mul(eta * error));
}

// Test dataset
for (const x of trainingData) {
  result = w.dot(x[0]);
  console.log(x[0], ":", result, unitStep(result));
}

imshow(T(errors));
