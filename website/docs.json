[
  {
    "name": "T",
    "kind": "method",
    "typestr": "(t: TensorLike, args?: TensorOpts): Tensor",
    "args": [
      {
        "name": "t",
        "typestr": "TensorLike",
        "docstr": "- An array of numbers, representing a Tensor. Or a Tensor in which\n   case T() acts as the identity function."
      },
      {
        "name": "args",
        "typestr": "TensorOpts",
        "docstr": "- An object like this { dtype: \"int32\", device: \"GPU:0\" }"
      }
    ],
    "retType": "Tensor",
    "docstr": "Turns a javascript array of numbers into a tensor. Like this:\n\n  import { T } from \"propel\";\n  T([[1, 2, 3], [4, 5, 6]]).square();\n\nIf a tensor is given to T, it simply returns it.",
    "sourceUrl": "https://github.com/propelml/propel/blob/956279aaa3727e7c9fc15662db23adfcc21c6166/api.ts#L23-L36"
  },
  {
    "name": "listDevices",
    "kind": "method",
    "typestr": "(): string[]",
    "args": [],
    "retType": "string[]",
    "docstr": "Returns a list of available device names.\n\n  import { listDevices } from \"propel\";\n  listDevices();",
    "sourceUrl": "https://github.com/propelml/propel/blob/956279aaa3727e7c9fc15662db23adfcc21c6166/api.ts#L38-L45"
  },
  {
    "name": "Tensor",
    "kind": "class",
    "docstr": "Tensor wraps a BasicTensor object. This is the main public\ninterface to tensor operatiors. Each instance has a unique id for use in\nbackprop.  Nothing about Tensors is backend specific.\nTensor might be renamed to BoxedTensor in the near future. To\nexternal users this class is called just Tensor. We use a more specific name\ninternally so as not to confuse it with the many other tensor classes in\nPropel.",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L28-L553"
  },
  {
    "name": "Tensor.basic",
    "kind": "property",
    "typestr": "BasicTensor",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L42"
  },
  {
    "name": "Tensor.id",
    "kind": "property",
    "typestr": "number",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L45"
  },
  {
    "name": "Tensor.constructor",
    "kind": "method",
    "typestr": "(t: BasicTensor): Tensor",
    "args": [
      {
        "name": "t",
        "typestr": "BasicTensor"
      }
    ],
    "retType": "Tensor",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L47-L51"
  },
  {
    "name": "Tensor.dispose",
    "kind": "method",
    "typestr": "(): void",
    "args": [],
    "retType": "void",
    "docstr": "Manually collect garbage. This is required in some form or another\nwhen using the DL/WebGL backend, see also gc().",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L53-L60"
  },
  {
    "name": "Tensor.assign",
    "kind": "method",
    "typestr": "(t: Tensor): void",
    "args": [
      {
        "name": "t",
        "typestr": "Tensor"
      }
    ],
    "retType": "void",
    "docstr": "In-place replacement of a tensor.\nThe argument passed to assign is destroyed and cannot be used after this\ncall. (FIXME this behavior is very aggressive.)",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L62-L77"
  },
  {
    "name": "Tensor[Symbol.iterator]",
    "kind": "method",
    "typestr": "(): { next: () => { value: number; done: boolean; }; }",
    "args": [],
    "retType": "{ next: () => { value: number; done: boolean; }; }",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L79-L98"
  },
  {
    "name": "Tensor.getData",
    "kind": "method",
    "typestr": "(): TypedArray",
    "args": [],
    "retType": "TypedArray",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L114-L116"
  },
  {
    "name": "Tensor.rank",
    "kind": "property",
    "typestr": "number",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L118-L120"
  },
  {
    "name": "Tensor.device",
    "kind": "property",
    "typestr": "string",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L122-L124"
  },
  {
    "name": "Tensor.dtype",
    "kind": "property",
    "typestr": "DType",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L126-L128"
  },
  {
    "name": "Tensor.shape",
    "kind": "property",
    "typestr": "number[]",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L130-L132"
  },
  {
    "name": "Tensor.toString",
    "kind": "method",
    "typestr": "(): string",
    "args": [],
    "retType": "string",
    "docstr": "Returns a string representation of an object. ",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L134-L136"
  },
  {
    "name": "Tensor.copy",
    "kind": "method",
    "typestr": "(device?: string): Tensor",
    "args": [
      {
        "name": "device",
        "typestr": "string"
      }
    ],
    "retType": "Tensor",
    "docstr": "Copies the tensor to the specified device (usually \"CPU:0\" or \"GPU:0\").\nIf device is unspecified, it makse a copy on the same device.",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L138-L145"
  },
  {
    "name": "Tensor.gpu",
    "kind": "method",
    "typestr": "(): Tensor",
    "args": [],
    "retType": "Tensor",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L147-L152"
  },
  {
    "name": "Tensor.cpu",
    "kind": "method",
    "typestr": "(): Tensor",
    "args": [],
    "retType": "Tensor",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L154-L159"
  },
  {
    "name": "Tensor.cast",
    "kind": "method",
    "typestr": "(dtype: DType): Tensor",
    "args": [
      {
        "name": "dtype",
        "typestr": "DType"
      }
    ],
    "retType": "Tensor",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L161-L163"
  },
  {
    "name": "Tensor.add",
    "kind": "method",
    "typestr": "(x: TensorLike): Tensor",
    "args": [
      {
        "name": "x",
        "typestr": "TensorLike"
      }
    ],
    "retType": "Tensor",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L165-L167"
  },
  {
    "name": "Tensor.sub",
    "kind": "method",
    "typestr": "(x: TensorLike): Tensor",
    "args": [
      {
        "name": "x",
        "typestr": "TensorLike"
      }
    ],
    "retType": "Tensor",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L169-L171"
  },
  {
    "name": "Tensor.mul",
    "kind": "method",
    "typestr": "(x: TensorLike): Tensor",
    "args": [
      {
        "name": "x",
        "typestr": "TensorLike"
      }
    ],
    "retType": "Tensor",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L173-L175"
  },
  {
    "name": "Tensor.div",
    "kind": "method",
    "typestr": "(x: TensorLike): Tensor",
    "args": [
      {
        "name": "x",
        "typestr": "TensorLike"
      }
    ],
    "retType": "Tensor",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L177-L179"
  },
  {
    "name": "Tensor.matmul",
    "kind": "method",
    "typestr": "(x: TensorLike): Tensor",
    "args": [
      {
        "name": "x",
        "typestr": "TensorLike"
      }
    ],
    "retType": "Tensor",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L181-L183"
  },
  {
    "name": "Tensor.onesLike",
    "kind": "method",
    "typestr": "(): Tensor",
    "args": [],
    "retType": "Tensor",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L185-L188"
  },
  {
    "name": "Tensor.zerosLike",
    "kind": "method",
    "typestr": "(): Tensor",
    "args": [],
    "retType": "Tensor",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L190-L193"
  },
  {
    "name": "Tensor.neg",
    "kind": "method",
    "typestr": "(): Tensor",
    "args": [],
    "retType": "Tensor",
    "docstr": "Negates each element of the tensor.\n\n  import { linspace, plot } from \"propel\";\n  x = linspace(-5, 5, 200);\n  plot(x, x.neg())",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L195-L203"
  },
  {
    "name": "Tensor.exp",
    "kind": "method",
    "typestr": "(): Tensor",
    "args": [],
    "retType": "Tensor",
    "docstr": "Exponentiates each element of the tensor.\n\n  import { linspace, plot } from \"propel\";\n  x = linspace(-5, 5, 200);\n  plot(x, x.exp())",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L205-L213"
  },
  {
    "name": "Tensor.log",
    "kind": "method",
    "typestr": "(): Tensor",
    "args": [],
    "retType": "Tensor",
    "docstr": "Applies the natural logarithm to each element of the tensor.\n\n  import { linspace, plot } from \"propel\";\n  x = linspace(0.001, 5, 200);\n  plot(x, x.log())",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L215-L223"
  },
  {
    "name": "Tensor.square",
    "kind": "method",
    "typestr": "(): Tensor",
    "args": [],
    "retType": "Tensor",
    "docstr": "Squares each element of the tensor.\n\n  import { linspace, plot } from \"propel\";\n  x = linspace(-5, 5, 200);\n  plot(x, x.square())",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L225-L233"
  },
  {
    "name": "Tensor.sinh",
    "kind": "method",
    "typestr": "(): Tensor",
    "args": [],
    "retType": "Tensor",
    "docstr": "Applies the hyperbolic sine function component-wise.\n\n  import { linspace, plot } from \"propel\";\n  x = linspace(-5, 5, 200);\n  plot(x, x.sinh())",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L235-L243"
  },
  {
    "name": "Tensor.cosh",
    "kind": "method",
    "typestr": "(): Tensor",
    "args": [],
    "retType": "Tensor",
    "docstr": "Applies the hyperbolic cosine function component-wise.\n\n  import { linspace, plot } from \"propel\";\n  x = linspace(-5, 5, 200);\n  plot(x, x.cosh())",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L245-L253"
  },
  {
    "name": "Tensor.tanh",
    "kind": "method",
    "typestr": "(): Tensor",
    "args": [],
    "retType": "Tensor",
    "docstr": "Applies the hyperbolic tangent function component-wise.\nWhere tanh(x) is defined to be (1 - exp(-2x)) / (1 + exp(-2x)).\n\n  import { linspace, plot } from \"propel\";\n  x = linspace(-10, 10, 200);\n  plot(x, x.tanh())",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L255-L264"
  },
  {
    "name": "Tensor.relu",
    "kind": "method",
    "typestr": "(): Tensor",
    "args": [],
    "retType": "Tensor",
    "docstr": "Applies the rectified linear unit function component-wise.\nWhere relu(x) is defined to be max(x, 0).\n\n  import { linspace, plot } from \"propel\";\n  x = linspace(-10, 10, 200);\n  plot(x, x.relu())",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L266-L275"
  },
  {
    "name": "Tensor.sigmoid",
    "kind": "method",
    "typestr": "(): Tensor",
    "args": [],
    "retType": "Tensor",
    "docstr": "Applies the sigmoid function component-wise to the tensor.\nThe sigmoid function is defined as 1 / (1 + exp(-x)).\n\n  import { linspace, plot } from \"propel\";\n  x = linspace(-10, 10, 200);\n  plot(x, x.sigmoid())",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L277-L286"
  },
  {
    "name": "Tensor.abs",
    "kind": "method",
    "typestr": "(): Tensor",
    "args": [],
    "retType": "Tensor",
    "docstr": "Applies absolute value component-wise to the tensor.\n\n  import { linspace, plot } from \"propel\";\n  x = linspace(-10, 10, 200);\n  plot(x, x.abs())",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L288-L296"
  },
  {
    "name": "Tensor.transpose",
    "kind": "method",
    "typestr": "(perm?: TensorLike): Tensor",
    "args": [
      {
        "name": "perm",
        "typestr": "TensorLike"
      }
    ],
    "retType": "Tensor",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L298-L304"
  },
  {
    "name": "Tensor.reverse",
    "kind": "method",
    "typestr": "(dims?: number[]): Tensor",
    "args": [
      {
        "name": "dims",
        "typestr": "number[]"
      }
    ],
    "retType": "Tensor",
    "docstr": "Reverses specific dimensions of a tensor. ",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L306-L319"
  },
  {
    "name": "Tensor.argmax",
    "kind": "method",
    "typestr": "(axis?: number): Tensor",
    "args": [
      {
        "name": "axis",
        "typestr": "number",
        "docstr": "defaults to 0."
      }
    ],
    "retType": "Tensor",
    "docstr": "Returns the index with the largest value across an axis of a tensor.",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L321-L327"
  },
  {
    "name": "Tensor.argmin",
    "kind": "method",
    "typestr": "(axis?: number): Tensor",
    "args": [
      {
        "name": "axis",
        "typestr": "number",
        "docstr": "defaults to 0."
      }
    ],
    "retType": "Tensor",
    "docstr": "Returns the index with the smallest value across an axis of a tensor.",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L329-L335"
  },
  {
    "name": "Tensor.reduceSum",
    "kind": "method",
    "typestr": "(axes?: number[], keepDims?: boolean): Tensor",
    "args": [
      {
        "name": "axes",
        "typestr": "number[]",
        "docstr": "defaults to all"
      },
      {
        "name": "keepDims",
        "typestr": "boolean"
      }
    ],
    "retType": "Tensor",
    "docstr": "Sum the tensor over the given axes.",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L337-L343"
  },
  {
    "name": "Tensor.reduceMean",
    "kind": "method",
    "typestr": "(axes?: number[], keepDims?: boolean): Tensor",
    "args": [
      {
        "name": "axes",
        "typestr": "number[]",
        "docstr": "defaults to all."
      },
      {
        "name": "keepDims",
        "typestr": "boolean"
      }
    ],
    "retType": "Tensor",
    "docstr": "Mean the tensor over the given axes.",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L345-L351"
  },
  {
    "name": "Tensor.reduceMax",
    "kind": "method",
    "typestr": "(axes?: number[], keepDims?: boolean): Tensor",
    "args": [
      {
        "name": "axes",
        "typestr": "number[]",
        "docstr": "defaults to all."
      },
      {
        "name": "keepDims",
        "typestr": "boolean"
      }
    ],
    "retType": "Tensor",
    "docstr": "Take the maximum value over the given axes.",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L353-L359"
  },
  {
    "name": "Tensor.reduceLogSumExp",
    "kind": "method",
    "typestr": "(axes?: number[], keepDims?: boolean): Tensor",
    "args": [
      {
        "name": "axes",
        "typestr": "number[]"
      },
      {
        "name": "keepDims",
        "typestr": "boolean"
      }
    ],
    "retType": "Tensor",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L361-L364"
  },
  {
    "name": "Tensor.equal",
    "kind": "method",
    "typestr": "(x: TensorLike): Tensor",
    "args": [
      {
        "name": "x",
        "typestr": "TensorLike"
      }
    ],
    "retType": "Tensor",
    "docstr": "Element-wise comparison. Returns a tensor with dtype == \"bool\". ",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L366-L369"
  },
  {
    "name": "Tensor.greater",
    "kind": "method",
    "typestr": "(x: TensorLike): Tensor",
    "args": [
      {
        "name": "x",
        "typestr": "TensorLike"
      }
    ],
    "retType": "Tensor",
    "docstr": "Returns a boolean tensor with the truth value of (this > x)\nelement-wise.",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L371-L376"
  },
  {
    "name": "Tensor.greaterEqual",
    "kind": "method",
    "typestr": "(x: TensorLike): Tensor",
    "args": [
      {
        "name": "x",
        "typestr": "TensorLike"
      }
    ],
    "retType": "Tensor",
    "docstr": "Returns a boolean tensor with the truth value of (this >= x)\nelement-wise.",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L378-L383"
  },
  {
    "name": "Tensor.less",
    "kind": "method",
    "typestr": "(x: TensorLike): Tensor",
    "args": [
      {
        "name": "x",
        "typestr": "TensorLike"
      }
    ],
    "retType": "Tensor",
    "docstr": "Returns a boolean tensor with the truth value of (this < x)\nelement-wise.",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L385-L390"
  },
  {
    "name": "Tensor.lessEqual",
    "kind": "method",
    "typestr": "(x: TensorLike): Tensor",
    "args": [
      {
        "name": "x",
        "typestr": "TensorLike"
      }
    ],
    "retType": "Tensor",
    "docstr": "Returns a boolean tensor with the truth value of (this <= x)\nelement-wise.",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L392-L397"
  },
  {
    "name": "Tensor.select",
    "kind": "method",
    "typestr": "(t: TensorLike, f: TensorLike): Tensor",
    "args": [
      {
        "name": "t",
        "typestr": "TensorLike"
      },
      {
        "name": "f",
        "typestr": "TensorLike"
      }
    ],
    "retType": "Tensor",
    "docstr": "Selects elements from `t` or `f`, depending on the condition (this).\nthis should be a boolean Tensor.",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L399-L406"
  },
  {
    "name": "Tensor.sign",
    "kind": "method",
    "typestr": "(): Tensor",
    "args": [],
    "retType": "Tensor",
    "docstr": "Returns an element-wise indication of the sign of a number.\n-1 for negative values and 1 for positive values.",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L408-L413"
  },
  {
    "name": "Tensor.slice",
    "kind": "method",
    "typestr": "(begin: number[], size: number[]): Tensor",
    "args": [
      {
        "name": "begin",
        "typestr": "number[]"
      },
      {
        "name": "size",
        "typestr": "number[]"
      }
    ],
    "retType": "Tensor",
    "docstr": "Return a slice from 'input'.\nThe output tensor is a tensor with dimensions described by 'size' whose\nvalues are extracted from 'input' starting at the offsets in 'begin'.\nbegin[i] specifies the offset into the ith dimension of 'input' to slice\nfrom.  size[i] specifies the number of elements of the ith dimension of\n'input' to slice. If size[i] is -1, all remaining elements in dimension\nare included in the slice -- this is equivalent to setting\nsize[i] = input.shape[i] - begin[i]",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L415-L428"
  },
  {
    "name": "Tensor.reshape",
    "kind": "method",
    "typestr": "(newShape: number[]): Tensor",
    "args": [
      {
        "name": "newShape",
        "typestr": "number[]"
      }
    ],
    "retType": "Tensor",
    "docstr": "Reshapes the tensor without changing its data. O(1).\n\n  import { range } from \"propel\";\n  n = 5\n  m = 2\n  t = range(m*n)\n  console.log(t.reshape([n, m]))\n  console.log(t.reshape([m, n]))",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L430-L441"
  },
  {
    "name": "Tensor.flatten",
    "kind": "method",
    "typestr": "(): Tensor",
    "args": [],
    "retType": "Tensor",
    "docstr": "Return a copy of the tensor collapsed into one dimension.\n\n  import { T } from \"propel\";\n  T([[1, 2], [3, 4]]).flatten();",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L443-L450"
  },
  {
    "name": "Tensor.squeeze",
    "kind": "method",
    "typestr": "(): Tensor",
    "args": [],
    "retType": "Tensor",
    "docstr": "Remove single-dimensional axes from the shape of a tensor.\n\n  import { T } from \"propel\";\n  T([[[2, 3, 4]]]).squeeze();",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L452-L460"
  },
  {
    "name": "Tensor.softmax",
    "kind": "method",
    "typestr": "(axis?: number): Tensor",
    "args": [
      {
        "name": "axis",
        "typestr": "number"
      }
    ],
    "retType": "Tensor",
    "docstr": "Returns the softmax activations of a tensor. ",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L462-L465"
  },
  {
    "name": "Tensor.logSoftmax",
    "kind": "method",
    "typestr": "(axis?: number): Tensor",
    "args": [
      {
        "name": "axis",
        "typestr": "number"
      }
    ],
    "retType": "Tensor",
    "docstr": "Numerically stable log(softmax(x)). ",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L467-L470"
  },
  {
    "name": "Tensor.dot",
    "kind": "method",
    "typestr": "(x: TensorLike): Tensor",
    "args": [
      {
        "name": "x",
        "typestr": "TensorLike"
      }
    ],
    "retType": "Tensor",
    "docstr": "Dot product of two tensors. For 2D tensors it is equivalent to matrix\nmultiplication. For 1D tensors to inner product of vectors (without\ncomplex conjugation). Currently higher order tensors are not supported.",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L472-L514"
  },
  {
    "name": "Tensor.oneHot",
    "kind": "method",
    "typestr": "(depth: number, onValue?: number, offValue?: number): Tensor",
    "args": [
      {
        "name": "depth",
        "typestr": "number"
      },
      {
        "name": "onValue",
        "typestr": "number"
      },
      {
        "name": "offValue",
        "typestr": "number"
      }
    ],
    "retType": "Tensor",
    "docstr": "Build a one-hot tensor from labels.\n\n  import { T } from \"propel\";\n  let labels = T([1, 3, 0], {dtype: \"int32\"});\n  labels.oneHot(5);",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L516-L527"
  },
  {
    "name": "Tensor.softmaxCE",
    "kind": "method",
    "typestr": "(labels: TensorLike): Tensor",
    "args": [
      {
        "name": "labels",
        "typestr": "TensorLike",
        "docstr": "A batch_size x num_classes matrix. The caller must ensure\nthat each batch of labels represents a valid probability\ndistribution. Often labels is one-hot along axis 1."
      }
    ],
    "retType": "Tensor",
    "docstr": "Computes softmax cross entropy on logits.\nThis is known as softmax_cross_entropy_with_logits in TF.",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L529-L543"
  },
  {
    "name": "Tensor.setDiag",
    "kind": "method",
    "typestr": "(diag: TensorLike): Tensor",
    "args": [
      {
        "name": "diag",
        "typestr": "TensorLike"
      }
    ],
    "retType": "Tensor",
    "docstr": "Sets the diagonal part of a matrix.\n\n  import { zeros } from \"propel\";\n  zeros([4, 3]).setDiag([1, 2, 3]);",
    "sourceUrl": "https://github.com/propelml/propel/blob/9eb5d8c425415fd8eb5ddb84bd928287fc72a4ed/tensor.ts#L545-L552"
  },
  {
    "name": "grad",
    "kind": "method",
    "typestr": "(f: any, argnum?: number): (...args: TensorLike[]) => Tensor",
    "args": [
      {
        "name": "f",
        "typestr": "any"
      },
      {
        "name": "argnum",
        "typestr": "number"
      }
    ],
    "retType": "(...args: TensorLike[]) => Tensor",
    "docstr": "grad(f) returns a gradient function. If f is a function that maps\nR^n to R^m, then the gradient function maps R^n to R^n.\nWhen evaluated at a point, it gives the slope in each dimension of\nthe function f. For example:\n\n  import { T, grad } from \"propel\";\n  let f = (x) => T(x).square()\n  g = grad(f)  // g(x) = 2*x\n  g(10) // is 2 * 10",
    "sourceUrl": "https://github.com/propelml/propel/blob/2f5799b8873b7f844bc0b2ae6d807086469575d2/backprop.ts#L147-L162"
  },
  {
    "name": "multigrad",
    "kind": "method",
    "typestr": "(f: any, argnums?: number[]): (...args: TensorLike[]) => Tensor[]",
    "args": [
      {
        "name": "f",
        "typestr": "any"
      },
      {
        "name": "argnums",
        "typestr": "number[]"
      }
    ],
    "retType": "(...args: TensorLike[]) => Tensor[]",
    "docstr": "Returns a function which differentiates f with respect to the given\nargnum indexes.",
    "sourceUrl": "https://github.com/propelml/propel/blob/2f5799b8873b7f844bc0b2ae6d807086469575d2/backprop.ts#L75-L84"
  },
  {
    "name": "multigradAndVal",
    "kind": "method",
    "typestr": "(f: any, argnums?: number[]): (...args: TensorLike[]) => [Tensor[], Tensor]",
    "args": [
      {
        "name": "f",
        "typestr": "any"
      },
      {
        "name": "argnums",
        "typestr": "number[]"
      }
    ],
    "retType": "(...args: TensorLike[]) => [Tensor[], Tensor]",
    "sourceUrl": "https://github.com/propelml/propel/blob/2f5799b8873b7f844bc0b2ae6d807086469575d2/backprop.ts#L126-L145"
  },
  {
    "name": "gradAndVal",
    "kind": "method",
    "typestr": "(f: any, argnum?: number): (...args: TensorLike[]) => [Tensor, Tensor]",
    "args": [
      {
        "name": "f",
        "typestr": "any"
      },
      {
        "name": "argnum",
        "typestr": "number"
      }
    ],
    "retType": "(...args: TensorLike[]) => [Tensor, Tensor]",
    "sourceUrl": "https://github.com/propelml/propel/blob/2f5799b8873b7f844bc0b2ae6d807086469575d2/backprop.ts#L164-L171"
  },
  {
    "name": "gradParams",
    "kind": "method",
    "typestr": "(f: ParamsFn, names?: string[]): (params: Params) => [Params, Tensor]",
    "args": [
      {
        "name": "f",
        "typestr": "ParamsFn"
      },
      {
        "name": "names",
        "typestr": "string[]"
      }
    ],
    "retType": "(params: Params) => [Params, Tensor]",
    "sourceUrl": "https://github.com/propelml/propel/blob/2f5799b8873b7f844bc0b2ae6d807086469575d2/backprop.ts#L92-L124"
  },
  {
    "name": "eye",
    "kind": "method",
    "typestr": "(size: number, opts?: TensorOpts): Tensor",
    "args": [
      {
        "name": "size",
        "typestr": "number"
      },
      {
        "name": "opts",
        "typestr": "TensorOpts"
      }
    ],
    "retType": "Tensor",
    "docstr": "Returns the identity matrix of a given size.\n\n  import { eye } from \"propel\";\n  eye(5);",
    "sourceUrl": "https://github.com/propelml/propel/blob/956279aaa3727e7c9fc15662db23adfcc21c6166/api.ts#L52-L62"
  },
  {
    "name": "linspace",
    "kind": "method",
    "typestr": "(start: number, stop: number, num?: number): Tensor",
    "args": [
      {
        "name": "start",
        "typestr": "number"
      },
      {
        "name": "stop",
        "typestr": "number"
      },
      {
        "name": "num",
        "typestr": "number"
      }
    ],
    "retType": "Tensor",
    "docstr": "Returns num evenly spaced samples, calculated over the interval\n[start, stop].\n\n  import { linspace } from \"propel\"\n  linspace(-1, 1, 5);",
    "sourceUrl": "https://github.com/propelml/propel/blob/956279aaa3727e7c9fc15662db23adfcc21c6166/api.ts#L64-L73"
  },
  {
    "name": "range",
    "kind": "method",
    "typestr": "(...args: number[]): Tensor",
    "args": [
      {
        "name": "args",
        "typestr": "number[]"
      }
    ],
    "retType": "Tensor",
    "docstr": "Return evenly spaced numbers over a specified interval.\nThis as a similar interface as arange in numpy.\n\n  import { range } from \"propel\"\n  range(10);",
    "sourceUrl": "https://github.com/propelml/propel/blob/956279aaa3727e7c9fc15662db23adfcc21c6166/api.ts#L75-L107"
  },
  {
    "name": "randn",
    "kind": "method",
    "typestr": "(shape: number[]): Tensor",
    "args": [
      {
        "name": "shape",
        "typestr": "number[]"
      }
    ],
    "retType": "Tensor",
    "docstr": "Produces a new tensor with random values, drawn from the standard normal\ndistribution.\n\n  import { range, randn, plot } from \"propel\"\n  n = 1000\n  plot(range(n), randn([n]))",
    "sourceUrl": "https://github.com/propelml/propel/blob/956279aaa3727e7c9fc15662db23adfcc21c6166/api.ts#L109-L119"
  },
  {
    "name": "fill",
    "kind": "method",
    "typestr": "(value: TensorLike, shape: number[]): Tensor",
    "args": [
      {
        "name": "value",
        "typestr": "TensorLike"
      },
      {
        "name": "shape",
        "typestr": "number[]"
      }
    ],
    "retType": "Tensor",
    "docstr": "fill returns a new tensor of the given shape, filled with constant values\nspecified by the `value` argument. `value` must be a scalar tensor.\n\n  import { fill } from \"propel\"\n  fill(31337, [2, 2])",
    "sourceUrl": "https://github.com/propelml/propel/blob/956279aaa3727e7c9fc15662db23adfcc21c6166/api.ts#L121-L129"
  },
  {
    "name": "zeros",
    "kind": "method",
    "typestr": "(shape: number[], opts?: TensorOpts): Tensor",
    "args": [
      {
        "name": "shape",
        "typestr": "number[]"
      },
      {
        "name": "opts",
        "typestr": "TensorOpts"
      }
    ],
    "retType": "Tensor",
    "docstr": "Return a new tensor of given shape and dtype, filled with zeros.\n\n  import { zeros } from \"propel\"\n  zeros([5, 2])",
    "sourceUrl": "https://github.com/propelml/propel/blob/956279aaa3727e7c9fc15662db23adfcc21c6166/api.ts#L131-L139"
  },
  {
    "name": "ones",
    "kind": "method",
    "typestr": "(shape: number[], opts?: TensorOpts): Tensor",
    "args": [
      {
        "name": "shape",
        "typestr": "number[]"
      },
      {
        "name": "opts",
        "typestr": "TensorOpts"
      }
    ],
    "retType": "Tensor",
    "docstr": "Return a new tensor of given shape and dtype, filled with ones.\n\n  import { ones } from \"propel\"\n  ones([2, 3])",
    "sourceUrl": "https://github.com/propelml/propel/blob/956279aaa3727e7c9fc15662db23adfcc21c6166/api.ts#L141-L149"
  },
  {
    "name": "Params",
    "kind": "class",
    "docstr": "A collection of named Tensors. Used with OptimizerSGD.\nIterate over it like this:\n\n  import { Params } from \"propel\";\n  let params = new Params()\n  params.randn(\"A\", [2]);\n  params.zeros(\"B\", [2, 2]);\n  params.forEach((tensor, name) => {\n    console.log(name);\n    console.log(tensor);\n  });",
    "sourceUrl": "https://github.com/propelml/propel/blob/956279aaa3727e7c9fc15662db23adfcc21c6166/api.ts#L151-L220"
  },
  {
    "name": "Params.has",
    "kind": "method",
    "typestr": "(name: string): boolean",
    "args": [
      {
        "name": "name",
        "typestr": "string"
      }
    ],
    "retType": "boolean",
    "sourceUrl": "https://github.com/propelml/propel/blob/956279aaa3727e7c9fc15662db23adfcc21c6166/api.ts#L168-L170"
  },
  {
    "name": "Params.get",
    "kind": "method",
    "typestr": "(name: string): Tensor",
    "args": [
      {
        "name": "name",
        "typestr": "string"
      }
    ],
    "retType": "Tensor",
    "sourceUrl": "https://github.com/propelml/propel/blob/956279aaa3727e7c9fc15662db23adfcc21c6166/api.ts#L172-L174"
  },
  {
    "name": "Params.set",
    "kind": "method",
    "typestr": "(name: string, t: Tensor): Tensor",
    "args": [
      {
        "name": "name",
        "typestr": "string"
      },
      {
        "name": "t",
        "typestr": "Tensor"
      }
    ],
    "retType": "Tensor",
    "sourceUrl": "https://github.com/propelml/propel/blob/956279aaa3727e7c9fc15662db23adfcc21c6166/api.ts#L176-L179"
  },
  {
    "name": "Params.forEach",
    "kind": "method",
    "typestr": "(cb: any): void",
    "args": [
      {
        "name": "cb",
        "typestr": "any"
      }
    ],
    "retType": "void",
    "sourceUrl": "https://github.com/propelml/propel/blob/956279aaa3727e7c9fc15662db23adfcc21c6166/api.ts#L181-L183"
  },
  {
    "name": "Params.randn",
    "kind": "method",
    "typestr": "(name: string, shape: number[], { device, scale }?: { device?: string; scale?: number; }): Tensor",
    "args": [
      {
        "name": "name",
        "typestr": "string"
      },
      {
        "name": "shape",
        "typestr": "number[]"
      },
      {
        "name": "__2",
        "typestr": "{ device?: string; scale?: number; }"
      }
    ],
    "retType": "Tensor",
    "docstr": "If the given name does not exist in the parameters object, this\ninitializes a new random normal tensor. If the name does exist\nin the parameters object, this just returns that stored tensor.",
    "sourceUrl": "https://github.com/propelml/propel/blob/956279aaa3727e7c9fc15662db23adfcc21c6166/api.ts#L185-L201"
  },
  {
    "name": "Params.zeros",
    "kind": "method",
    "typestr": "(name: string, shape: number[], dtype?: DType, device?: string): Tensor",
    "args": [
      {
        "name": "name",
        "typestr": "string"
      },
      {
        "name": "shape",
        "typestr": "number[]"
      },
      {
        "name": "dtype",
        "typestr": "DType"
      },
      {
        "name": "device",
        "typestr": "string"
      }
    ],
    "retType": "Tensor",
    "docstr": "If the given name does not exist in the parameters object, this\ninitializes a new tensor with zero values. If the name does exist\nin the parameters object, this just returns that stored tensor.",
    "sourceUrl": "https://github.com/propelml/propel/blob/956279aaa3727e7c9fc15662db23adfcc21c6166/api.ts#L203-L219"
  },
  {
    "name": "OptimizerSGD",
    "kind": "class",
    "docstr": "Stochastic gradient descent with momentum. ",
    "sourceUrl": "https://github.com/propelml/propel/blob/956279aaa3727e7c9fc15662db23adfcc21c6166/api.ts#L222-L286"
  },
  {
    "name": "OptimizerSGD.steps",
    "kind": "property",
    "typestr": "number",
    "sourceUrl": "https://github.com/propelml/propel/blob/956279aaa3727e7c9fc15662db23adfcc21c6166/api.ts#L224"
  },
  {
    "name": "OptimizerSGD.params",
    "kind": "property",
    "typestr": "Params",
    "sourceUrl": "https://github.com/propelml/propel/blob/956279aaa3727e7c9fc15662db23adfcc21c6166/api.ts#L225"
  },
  {
    "name": "OptimizerSGD.velocity",
    "kind": "property",
    "typestr": "Params",
    "sourceUrl": "https://github.com/propelml/propel/blob/956279aaa3727e7c9fc15662db23adfcc21c6166/api.ts#L234"
  },
  {
    "name": "OptimizerSGD.constructor",
    "kind": "method",
    "typestr": "(): OptimizerSGD",
    "args": [],
    "retType": "OptimizerSGD",
    "sourceUrl": "https://github.com/propelml/propel/blob/956279aaa3727e7c9fc15662db23adfcc21c6166/api.ts#L236-L240"
  },
  {
    "name": "OptimizerSGD.step",
    "kind": "method",
    "typestr": "(learningRate: number, momentum: number, lossFn: ParamsFn): number",
    "args": [
      {
        "name": "learningRate",
        "typestr": "number"
      },
      {
        "name": "momentum",
        "typestr": "number"
      },
      {
        "name": "lossFn",
        "typestr": "ParamsFn"
      }
    ],
    "retType": "number",
    "sourceUrl": "https://github.com/propelml/propel/blob/956279aaa3727e7c9fc15662db23adfcc21c6166/api.ts#L242-L285"
  },
  {
    "name": "plot",
    "kind": "method",
    "typestr": "(...args: any[]): void",
    "args": [
      {
        "name": "args",
        "typestr": "any[]"
      }
    ],
    "retType": "void",
    "sourceUrl": "https://github.com/propelml/propel/blob/bd2fb29f0a03f890c0132ab7d847db08e7f117e3/matplotlib.ts#L153-L188"
  },
  {
    "name": "imshow",
    "kind": "method",
    "typestr": "(image: Tensor): void",
    "args": [
      {
        "name": "image",
        "typestr": "Tensor"
      }
    ],
    "retType": "void",
    "sourceUrl": "https://github.com/propelml/propel/blob/bd2fb29f0a03f890c0132ab7d847db08e7f117e3/matplotlib.ts#L190-L216"
  }
]